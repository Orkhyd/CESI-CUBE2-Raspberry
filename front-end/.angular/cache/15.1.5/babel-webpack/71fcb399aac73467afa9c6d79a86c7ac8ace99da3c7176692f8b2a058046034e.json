{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/spred/testfile/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n// Affectation des variables\nlet connectRasp = false;\nfunction getCurrentTime() {\n  const date = new Date();\n  const hours = (\"0\" + date.getHours()).slice(-2);\n  const minutes = (\"0\" + date.getMinutes()).slice(-2);\n  const seconds = (\"0\" + date.getSeconds()).slice(-2);\n  return `${hours}:${minutes}:${seconds}`;\n}\nsetInterval(getCurrentTime, 500);\nexport class TestcomponentComponent {\n  constructor(renderer, http) {\n    this.http = http;\n    this.renderer = renderer;\n  }\n  ngOnInit() {\n    setInterval(() => {\n      this.heure = getCurrentTime();\n    }, 500);\n  }\n  // Dès l'appuis du BT 'Simuler une connexion':\n  simulConnect() {\n    var _this = this;\n    setInterval( /*#__PURE__*/_asyncToGenerator(function* () {\n      try {\n        const response = yield _this.http.get(\"https://sonde.up.railway.app/recordings/last\", {\n          observe: 'response'\n        }).toPromise();\n        if (response?.status === 200) {\n          console.log(response?.status);\n          connectRasp = true;\n          _this.changeValue();\n        } else {\n          console.log(\"La requête a retourné le code de statut : \" + response?.status);\n          connectRasp = false;\n          _this.changeValue();\n        }\n      } catch (error) {\n        connectRasp = false;\n        alert(\"Impossible de se connecter au serveur.\");\n        console.log(\"Impossible de se connecter au serveur.\");\n      }\n    }), 6000); //Essaye de se connecter pour récupérer les données toutes les 6s (10x par minute)\n  }\n\n  changeValue() {\n    const passageVert = document.getElementById('changeColor');\n    const changeImgRed = this.renderer.selectRootElement('#changeImgRed');\n    const changeImgGreen = this.renderer.selectRootElement('#changeImgGreen');\n    if (connectRasp) {\n      // Le code à exécuter si connectRasp est vrai\n      passageVert.style.backgroundColor = '#00ff00';\n      changeImgRed.style.display = \"none\";\n      changeImgGreen.style.display = \"block\";\n      this.degre = 30;\n      this.pression = 10;\n      this.humidite = 35;\n      this.derniereActu = \"A l'instant\";\n    } else {\n      // Le code à exécuter si connectRasp est faux\n      passageVert.style.backgroundColor = '#ff0000';\n      changeImgRed.style.display = \"block\";\n      changeImgGreen.style.display = \"none\";\n      this.degre = undefined;\n      this.pression = undefined;\n      this.humidite = undefined;\n      this.derniereActu = \"\";\n    }\n  }\n}\nTestcomponentComponent.ɵfac = function TestcomponentComponent_Factory(t) {\n  return new (t || TestcomponentComponent)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i1.HttpClient));\n};\nTestcomponentComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: TestcomponentComponent,\n  selectors: [[\"app-testcomponent\"]],\n  decls: 33,\n  vars: 5,\n  consts: [[1, \"connexion\"], [\"id\", \"changeImgRed\", \"src\", \"assets/img/rouge.png\"], [\"id\", \"changeImgGreen\", \"src\", \"assets/img/vert.png\", 2, \"display\", \"none\"], [1, \"ensembleElementPage\"], [1, \"block1\"], [\"align\", \"center\"], [\"type\", \"button\", \"value\", \"Simuler une connexion\", 3, \"click\"], [1, \"lesAppGraphique\"], [\"id\", \"changeColor\"]],\n  template: function TestcomponentComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelement(1, \"img\", 1)(2, \"img\", 2);\n      i0.ɵɵelementStart(3, \"h1\");\n      i0.ɵɵtext(4, \"Relev\\u00E9 Raspberry\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(5, \"div\", 3);\n      i0.ɵɵtext(6);\n      i0.ɵɵelementStart(7, \"div\", 4)(8, \"label\");\n      i0.ɵɵtext(9, \"Degr\\u00E9 : \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(10);\n      i0.ɵɵelement(11, \"br\");\n      i0.ɵɵelementStart(12, \"label\");\n      i0.ɵɵtext(13, \"Pression : \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(14);\n      i0.ɵɵelement(15, \"br\");\n      i0.ɵɵelementStart(16, \"label\");\n      i0.ɵɵtext(17, \"Humidit\\u00E9 : \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(18);\n      i0.ɵɵelement(19, \"br\");\n      i0.ɵɵelementStart(20, \"label\");\n      i0.ɵɵtext(21, \"Derni\\u00E8re actualisation : \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(22);\n      i0.ɵɵelement(23, \"br\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(24, \"div\", 5)(25, \"input\", 6);\n      i0.ɵɵlistener(\"click\", function TestcomponentComponent_Template_input_click_25_listener() {\n        return ctx.simulConnect();\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(26, \"div\", 7);\n      i0.ɵɵelement(27, \"div\")(28, \"div\")(29, \"div\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(30, \"footer\", 8)(31, \"span\");\n      i0.ɵɵtext(32, \"Relev\\u00E9 du Raspberry Pi Pico W | Cube 2 - Groupe 2 (Nicolas, Marius et Pierre)\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(6);\n      i0.ɵɵtextInterpolate1(\" \", ctx.heure, \" \");\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate(ctx.degre ? ctx.degre + \"\\u00B0\" : \"\");\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate(ctx.pression ? ctx.pression + \"HPa\" : \"\");\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate(ctx.humidite ? ctx.humidite + \"%\" : \"\");\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate(ctx.derniereActu);\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["connectRasp","getCurrentTime","date","Date","hours","getHours","slice","minutes","getMinutes","seconds","getSeconds","setInterval","TestcomponentComponent","constructor","renderer","http","ngOnInit","heure","simulConnect","response","get","observe","toPromise","status","console","log","changeValue","error","alert","passageVert","document","getElementById","changeImgRed","selectRootElement","changeImgGreen","style","backgroundColor","display","degre","pression","humidite","derniereActu","undefined","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["C:\\Users\\spred\\testfile\\src\\app\\testcomponent\\testcomponent.component.ts","C:\\Users\\spred\\testfile\\src\\app\\testcomponent\\testcomponent.component.html"],"sourcesContent":["import { Component, OnInit, Renderer2 } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { empty } from 'rxjs';\n\n// Affectation des variables\nlet connectRasp = false;\n\nfunction getCurrentTime(): string {\n  const date: Date = new Date();\n  const hours: string = (\"0\" + date.getHours()).slice(-2);\n  const minutes: string = (\"0\" + date.getMinutes()).slice(-2);\n  const seconds: string = (\"0\" + date.getSeconds()).slice(-2);\n  return `${hours}:${minutes}:${seconds}`;\n}\nsetInterval(getCurrentTime, 500);\n\n@Component({\n  selector: 'app-testcomponent',\n  templateUrl: './testcomponent.component.html',\n  styleUrls: ['./testcomponent.component.scss']\n})\n\nexport class TestcomponentComponent implements OnInit {\n  heure!: string;\n  degre?: number;\n  pression?: number;\n  humidite?: number;\n  derniereActu?: string;\n  response?: string;\n  renderer: Renderer2;\n\n  constructor(renderer: Renderer2, private http: HttpClient) {\n    this.renderer = renderer;\n  }\n\n  ngOnInit() {\n    setInterval(() => { this.heure = getCurrentTime(); }, 500);\n  }\n\n  // Dès l'appuis du BT 'Simuler une connexion':\n  simulConnect(): void {\n    setInterval(async () => {\n      try {\n        const response = await this.http.get<any>(\"https://sonde.up.railway.app/recordings/last\", { observe: 'response' }).toPromise();\n        if (response?.status === 200) {\n          console.log(response?.status);\n          connectRasp = true;\n          this.changeValue();\n        } else {\n          console.log(\"La requête a retourné le code de statut : \" + response?.status);\n          connectRasp = false;\n          this.changeValue();\n        }\n      } catch (error) {\n        connectRasp = false;\n        alert(\"Impossible de se connecter au serveur.\");\n        console.log(\"Impossible de se connecter au serveur.\");\n      }\n    }, 6000); //Essaye de se connecter pour récupérer les données toutes les 6s (10x par minute)\n  }    \n\n  changeValue() {\n    const passageVert = document.getElementById('changeColor')!;\n    const changeImgRed = this.renderer.selectRootElement('#changeImgRed');\n    const changeImgGreen = this.renderer.selectRootElement('#changeImgGreen');\n\n    if (connectRasp) {\n        // Le code à exécuter si connectRasp est vrai\n        passageVert.style.backgroundColor = '#00ff00';\n        changeImgRed.style.display = \"none\";\n        changeImgGreen.style.display = \"block\";\n        this.degre = 30;\n        this.pression = 10;\n        this.humidite = 35;\n        this.derniereActu = \"A l'instant\";\n    } else {\n        // Le code à exécuter si connectRasp est faux\n        passageVert.style.backgroundColor = '#ff0000';\n        changeImgRed.style.display = \"block\";\n        changeImgGreen.style.display = \"none\";\n        this.degre = undefined;\n        this.pression = undefined;\n        this.humidite = undefined;\n        this.derniereActu = \"\";\n    }\n  }\n}","<!-- IMG connect with Title -->\n<div class=\"connexion\">\n    <img id=\"changeImgRed\" src=\"assets/img/rouge.png\">\n    <img id=\"changeImgGreen\" style=\"display: none;\" src=\"assets/img/vert.png\">\n    <h1>Relevé Raspberry</h1>\n</div>\n\n<!-- Encadrement + Data -->\n<div class=\"ensembleElementPage\">\n    {{ heure }}\n    <!-- DATA ENCADRER -->\n    <div class=\"block1\">\n        <label>Degré : </label>{{ degre ? degre + \"°\" : \"\" }}<br />\n        <label>Pression : </label>{{ pression ? pression + \"HPa\" : \"\" }}<br />\n        <label>Humidité : </label>{{ humidite ? humidite + \"%\" : \"\" }}<br />\n        <label>Dernière actualisation : </label>{{ derniereActu }}<br />\n    </div>\n\n    <!-- Form Avec BT simulation connexion -->\n    <div align=\"center\">\n        <input type=\"button\" value=\"Simuler une connexion\" (click)=\"simulConnect();\" />\n    </div>\n\n    <!-- Les Apps Graphique -->\n    <div class=\"lesAppGraphique\">\n        <div> <!-- Thermomètre -->\n        </div>\n        <div> <!-- Pression -->\n        </div>\n        <div> <!-- Humidité -->\n        </div>\n    </div>\n</div>\n\n<!-- Footer -->\n<footer id=\"changeColor\">\n    <span>Relevé du Raspberry Pi Pico W | Cube 2 - Groupe 2 (Nicolas, Marius et Pierre)</span>\n</footer>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}