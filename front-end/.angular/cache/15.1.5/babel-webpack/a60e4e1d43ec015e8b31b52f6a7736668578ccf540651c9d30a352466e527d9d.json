{"ast":null,"code":"import * as i0 from \"@angular/core\";\n// Affectation des variables\nlet connectRasp = false;\nfunction getCurrentTime() {\n  const date = new Date();\n  const hours = (\"0\" + date.getHours()).slice(-2);\n  const minutes = (\"0\" + date.getMinutes()).slice(-2);\n  const seconds = (\"0\" + date.getSeconds()).slice(-2);\n  return `${hours}:${minutes}:${seconds}`;\n}\nsetInterval(getCurrentTime, 500);\nexport class TestcomponentComponent {\n  constructor(renderer) {\n    this.renderer = renderer;\n  }\n  ngOnInit() {\n    setInterval(() => {\n      this.heure = getCurrentTime();\n    }, 500);\n    /*this.http.get('https://sonde.up.railway.app/recordings').subscribe(data => {\r\n       // Affichez la première information\r\n      console.log('test1');\r\n      // Affichez la deuxième information\r\n      console.log('test2');\r\n    });*/\n  }\n  // Dès l'appuis du BT 'Simuler une connexion':\n  simulConnect() {\n    setInterval(() => {\n      try {\n        // Connexion BDD à mettre ICI, si ça fonctionne => connectRasp true\n        connectRasp = true;\n      } catch (error) {\n        alert(error);\n        connectRasp = false;\n      }\n      this.changeValue();\n    }, 6000); //Essaye de se connecter pour recup DATA toute les 6s (10x par minute)\n  }\n\n  changeValue() {\n    const passageVert = document.getElementById('changeColor');\n    const changeImgRed = this.renderer.selectRootElement('#changeImgRed');\n    const changeImgGreen = this.renderer.selectRootElement('#changeImgGreen');\n    if (connectRasp) {\n      // Le code à exécuter si connectRasp est vrai\n      passageVert.style.backgroundColor = '#00ff00';\n      changeImgRed.style.display = \"none\";\n      changeImgGreen.style.display = \"block\";\n      this.degre = 20;\n      this.pression = 10;\n      this.humidite = 35;\n    } else {\n      // Le code à exécuter si connectRasp est faux\n      passageVert.style.backgroundColor = '#ff0000';\n      changeImgRed.style.display = \"block\";\n      changeImgGreen.style.display = \"none\";\n      this.degre = undefined;\n      this.pression = undefined;\n      this.humidite = undefined;\n    }\n  }\n}\nTestcomponentComponent.ɵfac = function TestcomponentComponent_Factory(t) {\n  return new (t || TestcomponentComponent)(i0.ɵɵdirectiveInject(i0.Renderer2));\n};\nTestcomponentComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: TestcomponentComponent,\n  selectors: [[\"app-testcomponent\"]],\n  decls: 32,\n  vars: 4,\n  consts: [[1, \"connexion\"], [\"id\", \"changeImgRed\", \"src\", \"assets/img/rouge.png\"], [\"id\", \"changeImgGreen\", \"src\", \"assets/img/vert.png\", 2, \"display\", \"none\"], [1, \"ensembleElementPage\"], [1, \"block1\"], [\"align\", \"center\"], [\"type\", \"button\", \"value\", \"Simuler une connexion\", 3, \"click\"], [1, \"lesAppGraphique\"], [\"id\", \"changeColor\"]],\n  template: function TestcomponentComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelement(1, \"img\", 1)(2, \"img\", 2);\n      i0.ɵɵelementStart(3, \"h1\");\n      i0.ɵɵtext(4, \"Relev\\u00E9 Raspberry\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(5, \"div\", 3)(6, \"div\", 4)(7, \"label\");\n      i0.ɵɵtext(8, \"Heure : \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(9);\n      i0.ɵɵelement(10, \"br\");\n      i0.ɵɵelementStart(11, \"label\");\n      i0.ɵɵtext(12, \"Degr\\u00E9 : \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(13);\n      i0.ɵɵelement(14, \"br\");\n      i0.ɵɵelementStart(15, \"label\");\n      i0.ɵɵtext(16, \"Pression : \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(17);\n      i0.ɵɵelement(18, \"br\");\n      i0.ɵɵelementStart(19, \"label\");\n      i0.ɵɵtext(20, \"Humidit\\u00E9 : \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(21);\n      i0.ɵɵelement(22, \"br\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(23, \"div\", 5)(24, \"input\", 6);\n      i0.ɵɵlistener(\"click\", function TestcomponentComponent_Template_input_click_24_listener() {\n        return ctx.simulConnect();\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(25, \"div\", 7);\n      i0.ɵɵelement(26, \"div\")(27, \"div\")(28, \"div\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(29, \"footer\", 8)(30, \"span\");\n      i0.ɵɵtext(31, \"Relev\\u00E9 du Raspberry Pi Pico W | Cube 2 - Groupe 2 (Nicolas, Marius et Pierre)\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(9);\n      i0.ɵɵtextInterpolate(ctx.heure);\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate(ctx.degre ? ctx.degre + \"\\u00B0\" : \"\");\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate(ctx.pression ? ctx.pression + \"HPa\" : \"\");\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate(ctx.humidite ? ctx.humidite + \"%\" : \"\");\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";AAIA;AACA,IAAIA,WAAW,GAAG,KAAK;AAEvB,SAASC,cAAc;EACrB,MAAMC,IAAI,GAAS,IAAIC,IAAI,EAAE;EAC7B,MAAMC,KAAK,GAAW,CAAC,GAAG,GAAGF,IAAI,CAACG,QAAQ,EAAE,EAAEC,KAAK,CAAC,CAAC,CAAC,CAAC;EACvD,MAAMC,OAAO,GAAW,CAAC,GAAG,GAAGL,IAAI,CAACM,UAAU,EAAE,EAAEF,KAAK,CAAC,CAAC,CAAC,CAAC;EAC3D,MAAMG,OAAO,GAAW,CAAC,GAAG,GAAGP,IAAI,CAACQ,UAAU,EAAE,EAAEJ,KAAK,CAAC,CAAC,CAAC,CAAC;EAC3D,OAAO,GAAGF,KAAK,IAAIG,OAAO,IAAIE,OAAO,EAAE;AACzC;AACAE,WAAW,CAACV,cAAc,EAAE,GAAG,CAAC;AAQhC,OAAM,MAAOW,sBAAsB;EAOjCC,YAAYC,QAAmB;IAC7B,IAAI,CAACA,QAAQ,GAAGA,QAAQ;EAC1B;EAEAC,QAAQ;IACNJ,WAAW,CAAC,MAAK;MAAG,IAAI,CAACK,KAAK,GAAGf,cAAc,EAAE;IAAE,CAAC,EAAE,GAAG,CAAC;IAC1D;;;;;;EAMF;EAEA;EACAgB,YAAY;IACVN,WAAW,CAAC,MAAK;MACf,IAAI;QACF;QACAX,WAAW,GAAG,IAAI;OACnB,CAAC,OAAOkB,KAAK,EAAE;QACdC,KAAK,CAACD,KAAK,CAAC;QACZlB,WAAW,GAAG,KAAK;;MAErB,IAAI,CAACoB,WAAW,EAAE;IACpB,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;EACZ;;EAEAA,WAAW;IACT,MAAMC,WAAW,GAAGC,QAAQ,CAACC,cAAc,CAAC,aAAa,CAAE;IAC3D,MAAMC,YAAY,GAAG,IAAI,CAACV,QAAQ,CAACW,iBAAiB,CAAC,eAAe,CAAC;IACrE,MAAMC,cAAc,GAAG,IAAI,CAACZ,QAAQ,CAACW,iBAAiB,CAAC,iBAAiB,CAAC;IAEzE,IAAIzB,WAAW,EAAE;MACb;MACAqB,WAAW,CAACM,KAAK,CAACC,eAAe,GAAG,SAAS;MAC7CJ,YAAY,CAACG,KAAK,CAACE,OAAO,GAAG,MAAM;MACnCH,cAAc,CAACC,KAAK,CAACE,OAAO,GAAG,OAAO;MACtC,IAAI,CAACC,KAAK,GAAG,EAAE;MACf,IAAI,CAACC,QAAQ,GAAG,EAAE;MAClB,IAAI,CAACC,QAAQ,GAAG,EAAE;KACrB,MAAM;MACH;MACAX,WAAW,CAACM,KAAK,CAACC,eAAe,GAAG,SAAS;MAC7CJ,YAAY,CAACG,KAAK,CAACE,OAAO,GAAG,OAAO;MACpCH,cAAc,CAACC,KAAK,CAACE,OAAO,GAAG,MAAM;MACrC,IAAI,CAACC,KAAK,GAAGG,SAAS;MACtB,IAAI,CAACF,QAAQ,GAAGE,SAAS;MACzB,IAAI,CAACD,QAAQ,GAAGC,SAAS;;EAE/B;;AAzDWrB,sBAAsB;mBAAtBA,sBAAsB;AAAA;AAAtBA,sBAAsB;QAAtBA,sBAAsB;EAAAsB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCrBnCC,8BAAuB;MACnBA,yBAAkD;MAElDA,0BAAI;MAAAA,qCAAgB;MAAAA,iBAAK;MAI7BA,8BAAiC;MAGlBA,wBAAQ;MAAAA,iBAAQ;MAAAA,YAAW;MAAAA,sBAAM;MACxCA,8BAAO;MAAAA,8BAAQ;MAAAA,iBAAQ;MAAAA,aAA8B;MAAAA,sBAAM;MAC3DA,8BAAO;MAAAA,4BAAW;MAAAA,iBAAQ;MAAAA,aAAsC;MAAAA,sBAAM;MACtEA,8BAAO;MAAAA,iCAAW;MAAAA,iBAAQ;MAAAA,aAAoC;MAAAA,sBAAM;MACxEA,iBAAM;MAGNA,+BAAoB;MACmCA;QAAA,OAASC,kBAAc;MAAA,EAAE;MAA5ED,iBAA+E;MAInFA,+BAA6B;MACzBA,uBACM;MAKVA,iBAAM;MAIVA,kCAAyB;MACfA,mGAA6E;MAAAA,iBAAO;;;MAxB/DA,eAAW;MAAXA,+BAAW;MACXA,eAA8B;MAA9BA,2DAA8B;MAC3BA,eAAsC;MAAtCA,8DAAsC;MACtCA,eAAoC;MAApCA,4DAAoC","names":["connectRasp","getCurrentTime","date","Date","hours","getHours","slice","minutes","getMinutes","seconds","getSeconds","setInterval","TestcomponentComponent","constructor","renderer","ngOnInit","heure","simulConnect","error","alert","changeValue","passageVert","document","getElementById","changeImgRed","selectRootElement","changeImgGreen","style","backgroundColor","display","degre","pression","humidite","undefined","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["C:\\Users\\spred\\testfile\\src\\app\\testcomponent\\testcomponent.component.ts","C:\\Users\\spred\\testfile\\src\\app\\testcomponent\\testcomponent.component.html"],"sourcesContent":["import { Component, OnInit, Renderer2 } from '@angular/core';\n//import { HttpClient } from '@angular/common/http';\nimport { empty } from 'rxjs';\n\n// Affectation des variables\nlet connectRasp = false;\n\nfunction getCurrentTime(): string {\n  const date: Date = new Date();\n  const hours: string = (\"0\" + date.getHours()).slice(-2);\n  const minutes: string = (\"0\" + date.getMinutes()).slice(-2);\n  const seconds: string = (\"0\" + date.getSeconds()).slice(-2);\n  return `${hours}:${minutes}:${seconds}`;\n}\nsetInterval(getCurrentTime, 500);\n\n@Component({\n  selector: 'app-testcomponent',\n  templateUrl: './testcomponent.component.html',\n  styleUrls: ['./testcomponent.component.scss']\n})\n\nexport class TestcomponentComponent implements OnInit {\n  heure!: string;\n  degre?: number;\n  pression?: number;\n  humidite?: number;\n  renderer: Renderer2;\n\n  constructor(renderer: Renderer2) {\n    this.renderer = renderer;\n  }\n\n  ngOnInit() {\n    setInterval(() => { this.heure = getCurrentTime(); }, 500);\n    /*this.http.get('https://sonde.up.railway.app/recordings').subscribe(data => {\n       // Affichez la première information\n      console.log('test1');\n      // Affichez la deuxième information\n      console.log('test2');\n    });*/\n  }\n\n  // Dès l'appuis du BT 'Simuler une connexion':\n  simulConnect(): void {\n    setInterval(() => {\n      try {\n        // Connexion BDD à mettre ICI, si ça fonctionne => connectRasp true\n        connectRasp = true;\n      } catch (error) {\n        alert(error);\n        connectRasp = false;\n      }\n      this.changeValue();\n    }, 6000); //Essaye de se connecter pour recup DATA toute les 6s (10x par minute)\n  }\n\n  changeValue() {\n    const passageVert = document.getElementById('changeColor')!;\n    const changeImgRed = this.renderer.selectRootElement('#changeImgRed');\n    const changeImgGreen = this.renderer.selectRootElement('#changeImgGreen');\n\n    if (connectRasp) {\n        // Le code à exécuter si connectRasp est vrai\n        passageVert.style.backgroundColor = '#00ff00';\n        changeImgRed.style.display = \"none\";\n        changeImgGreen.style.display = \"block\";\n        this.degre = 20;\n        this.pression = 10;\n        this.humidite = 35;\n    } else {\n        // Le code à exécuter si connectRasp est faux\n        passageVert.style.backgroundColor = '#ff0000';\n        changeImgRed.style.display = \"block\";\n        changeImgGreen.style.display = \"none\";\n        this.degre = undefined;\n        this.pression = undefined;\n        this.humidite = undefined;\n    }\n  }\n}","<!-- IMG connect with Title -->\n<div class=\"connexion\">\n    <img id=\"changeImgRed\" src=\"assets/img/rouge.png\">\n    <img id=\"changeImgGreen\" style=\"display: none;\" src=\"assets/img/vert.png\">\n    <h1>Relevé Raspberry</h1>\n</div>\n\n<!-- Encadrement + Data -->\n<div class=\"ensembleElementPage\">\n    <!-- DATA ENCADRER -->\n    <div class=\"block1\">\n        <label>Heure : </label>{{ heure }}<br />\n        <label>Degré : </label>{{ degre ? degre + \"°\" : \"\" }}<br />\n        <label>Pression : </label>{{ pression ? pression + \"HPa\" : \"\" }}<br />\n        <label>Humidité : </label>{{ humidite ? humidite + \"%\" : \"\" }}<br />\n    </div>\n\n    <!-- Form Avec BT simulation connexion -->\n    <div align=\"center\">\n        <input type=\"button\" value=\"Simuler une connexion\" (click)=\"simulConnect();\" />\n    </div>\n\n    <!-- Les Apps Graphique -->\n    <div class=\"lesAppGraphique\">\n        <div> <!-- Thermomètre -->\n        </div>\n        <div> <!-- Pression -->\n        </div>\n        <div> <!-- Humidité -->\n        </div>\n    </div>\n</div>\n\n<!-- Footer -->\n<footer id=\"changeColor\">\n    <span>Relevé du Raspberry Pi Pico W | Cube 2 - Groupe 2 (Nicolas, Marius et Pierre)</span>\n</footer>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}