{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\n// Affectation des variables\nlet connectRasp = false;\nfunction getCurrentTime() {\n  const date = new Date();\n  const hours = (\"0\" + date.getHours()).slice(-2);\n  const minutes = (\"0\" + date.getMinutes()).slice(-2);\n  const seconds = (\"0\" + date.getSeconds()).slice(-2);\n  return `${hours}:${minutes}:${seconds}`;\n}\nsetInterval(getCurrentTime, 500);\nlet TestcomponentComponent = class TestcomponentComponent {\n  constructor(renderer, http) {\n    this.http = http;\n    this.renderer = renderer;\n  }\n  ngOnInit() {\n    setInterval(() => {\n      this.heure = getCurrentTime();\n    }, 500);\n    /*this.http.get('https://sonde.up.railway.app/recordings').subscribe(data => {\r\n       // Affichez la première information\r\n      console.log('test1');\r\n      // Affichez la deuxième information\r\n      console.log('test2');\r\n    });*/\n  }\n  // Dès l'appuis du BT 'Simuler une connexion':\n  simulConnect() {\n    setInterval(() => {\n      try {\n        // Connexion BDD à mettre ICI, si ça fonctionne => connectRasp true\n        connectRasp = true;\n      } catch (error) {\n        alert(error);\n        connectRasp = false;\n      }\n      this.changeValue();\n    }, 6000); //Essaye de se connecter pour recup DATA toute les 6s (10x par minute)\n  }\n\n  changeValue() {\n    const passageVert = document.getElementById('changeColor');\n    const changeImgRed = this.renderer.selectRootElement('#changeImgRed');\n    const changeImgGreen = this.renderer.selectRootElement('#changeImgGreen');\n    if (connectRasp) {\n      // Le code à exécuter si connectRasp est vrai\n      passageVert.style.backgroundColor = '#00ff00';\n      changeImgRed.style.display = \"none\";\n      changeImgGreen.style.display = \"block\";\n      this.degre = 20;\n      this.pression = 10;\n      this.humidite = 35;\n    } else {\n      // Le code à exécuter si connectRasp est faux\n      passageVert.style.backgroundColor = '#ff0000';\n      changeImgRed.style.display = \"block\";\n      changeImgGreen.style.display = \"none\";\n      this.degre = undefined;\n      this.pression = undefined;\n      this.humidite = undefined;\n    }\n  }\n};\nTestcomponentComponent = __decorate([Component({\n  selector: 'app-testcomponent',\n  templateUrl: './testcomponent.component.html',\n  styleUrls: ['./testcomponent.component.scss']\n})], TestcomponentComponent);\nexport { TestcomponentComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAA2B,eAAe;AAI5D;AACA,IAAIC,WAAW,GAAG,KAAK;AAEvB,SAASC,cAAc;EACrB,MAAMC,IAAI,GAAS,IAAIC,IAAI,EAAE;EAC7B,MAAMC,KAAK,GAAW,CAAC,GAAG,GAAGF,IAAI,CAACG,QAAQ,EAAE,EAAEC,KAAK,CAAC,CAAC,CAAC,CAAC;EACvD,MAAMC,OAAO,GAAW,CAAC,GAAG,GAAGL,IAAI,CAACM,UAAU,EAAE,EAAEF,KAAK,CAAC,CAAC,CAAC,CAAC;EAC3D,MAAMG,OAAO,GAAW,CAAC,GAAG,GAAGP,IAAI,CAACQ,UAAU,EAAE,EAAEJ,KAAK,CAAC,CAAC,CAAC,CAAC;EAC3D,OAAO,GAAGF,KAAK,IAAIG,OAAO,IAAIE,OAAO,EAAE;AACzC;AACAE,WAAW,CAACV,cAAc,EAAE,GAAG,CAAC;AAQzB,IAAMW,sBAAsB,GAA5B,MAAMA,sBAAsB;EAOjCC,YAAYC,QAAmB,EAAUC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAC3C,IAAI,CAACD,QAAQ,GAAGA,QAAQ;EAC1B;EAEAE,QAAQ;IACNL,WAAW,CAAC,MAAK;MAAG,IAAI,CAACM,KAAK,GAAGhB,cAAc,EAAE;IAAE,CAAC,EAAE,GAAG,CAAC;IAC1D;;;;;;EAMF;EAEA;EACAiB,YAAY;IACVP,WAAW,CAAC,MAAK;MACf,IAAI;QACF;QACAX,WAAW,GAAG,IAAI;OACnB,CAAC,OAAOmB,KAAK,EAAE;QACdC,KAAK,CAACD,KAAK,CAAC;QACZnB,WAAW,GAAG,KAAK;;MAErB,IAAI,CAACqB,WAAW,EAAE;IACpB,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;EACZ;;EAEAA,WAAW;IACT,MAAMC,WAAW,GAAGC,QAAQ,CAACC,cAAc,CAAC,aAAa,CAAE;IAC3D,MAAMC,YAAY,GAAG,IAAI,CAACX,QAAQ,CAACY,iBAAiB,CAAC,eAAe,CAAC;IACrE,MAAMC,cAAc,GAAG,IAAI,CAACb,QAAQ,CAACY,iBAAiB,CAAC,iBAAiB,CAAC;IAEzE,IAAI1B,WAAW,EAAE;MACb;MACAsB,WAAW,CAACM,KAAK,CAACC,eAAe,GAAG,SAAS;MAC7CJ,YAAY,CAACG,KAAK,CAACE,OAAO,GAAG,MAAM;MACnCH,cAAc,CAACC,KAAK,CAACE,OAAO,GAAG,OAAO;MACtC,IAAI,CAACC,KAAK,GAAG,EAAE;MACf,IAAI,CAACC,QAAQ,GAAG,EAAE;MAClB,IAAI,CAACC,QAAQ,GAAG,EAAE;KACrB,MAAM;MACH;MACAX,WAAW,CAACM,KAAK,CAACC,eAAe,GAAG,SAAS;MAC7CJ,YAAY,CAACG,KAAK,CAACE,OAAO,GAAG,OAAO;MACpCH,cAAc,CAACC,KAAK,CAACE,OAAO,GAAG,MAAM;MACrC,IAAI,CAACC,KAAK,GAAGG,SAAS;MACtB,IAAI,CAACF,QAAQ,GAAGE,SAAS;MACzB,IAAI,CAACD,QAAQ,GAAGC,SAAS;;EAE/B;CACD;AA1DYtB,sBAAsB,eANlCb,SAAS,CAAC;EACToC,QAAQ,EAAE,mBAAmB;EAC7BC,WAAW,EAAE,gCAAgC;EAC7CC,SAAS,EAAE,CAAC,gCAAgC;CAC7C,CAAC,GAEWzB,sBAAsB,CA0DlC;SA1DYA,sBAAsB","names":["Component","connectRasp","getCurrentTime","date","Date","hours","getHours","slice","minutes","getMinutes","seconds","getSeconds","setInterval","TestcomponentComponent","constructor","renderer","http","ngOnInit","heure","simulConnect","error","alert","changeValue","passageVert","document","getElementById","changeImgRed","selectRootElement","changeImgGreen","style","backgroundColor","display","degre","pression","humidite","undefined","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\spred\\testfile\\src\\app\\testcomponent\\testcomponent.component.ts"],"sourcesContent":["import { Component, OnInit, Renderer2 } from '@angular/core';\n//import { HttpClient } from '@angular/common/http';\nimport { empty } from 'rxjs';\n\n// Affectation des variables\nlet connectRasp = false;\n\nfunction getCurrentTime(): string {\n  const date: Date = new Date();\n  const hours: string = (\"0\" + date.getHours()).slice(-2);\n  const minutes: string = (\"0\" + date.getMinutes()).slice(-2);\n  const seconds: string = (\"0\" + date.getSeconds()).slice(-2);\n  return `${hours}:${minutes}:${seconds}`;\n}\nsetInterval(getCurrentTime, 500);\n\n@Component({\n  selector: 'app-testcomponent',\n  templateUrl: './testcomponent.component.html',\n  styleUrls: ['./testcomponent.component.scss']\n})\n\nexport class TestcomponentComponent implements OnInit {\n  heure!: string;\n  degre?: number;\n  pression?: number;\n  humidite?: number;\n  renderer: Renderer2;\n\n  constructor(renderer: Renderer2, private http: HttpClient) {\n    this.renderer = renderer;\n  }\n\n  ngOnInit() {\n    setInterval(() => { this.heure = getCurrentTime(); }, 500);\n    /*this.http.get('https://sonde.up.railway.app/recordings').subscribe(data => {\n       // Affichez la première information\n      console.log('test1');\n      // Affichez la deuxième information\n      console.log('test2');\n    });*/\n  }\n\n  // Dès l'appuis du BT 'Simuler une connexion':\n  simulConnect(): void {\n    setInterval(() => {\n      try {\n        // Connexion BDD à mettre ICI, si ça fonctionne => connectRasp true\n        connectRasp = true;\n      } catch (error) {\n        alert(error);\n        connectRasp = false;\n      }\n      this.changeValue();\n    }, 6000); //Essaye de se connecter pour recup DATA toute les 6s (10x par minute)\n  }\n\n  changeValue() {\n    const passageVert = document.getElementById('changeColor')!;\n    const changeImgRed = this.renderer.selectRootElement('#changeImgRed');\n    const changeImgGreen = this.renderer.selectRootElement('#changeImgGreen');\n\n    if (connectRasp) {\n        // Le code à exécuter si connectRasp est vrai\n        passageVert.style.backgroundColor = '#00ff00';\n        changeImgRed.style.display = \"none\";\n        changeImgGreen.style.display = \"block\";\n        this.degre = 20;\n        this.pression = 10;\n        this.humidite = 35;\n    } else {\n        // Le code à exécuter si connectRasp est faux\n        passageVert.style.backgroundColor = '#ff0000';\n        changeImgRed.style.display = \"block\";\n        changeImgGreen.style.display = \"none\";\n        this.degre = undefined;\n        this.pression = undefined;\n        this.humidite = undefined;\n    }\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}