{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/rms2s/Documents/MEAN-sondes-back/front-end/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n// Affectation des variables\nlet connectRasp = false;\nfunction getCurrentTime() {\n  const date = new Date();\n  const hours = (\"0\" + date.getHours()).slice(-2);\n  const minutes = (\"0\" + date.getMinutes()).slice(-2);\n  const seconds = (\"0\" + date.getSeconds()).slice(-2);\n  return `${hours}:${minutes}:${seconds}`;\n}\nsetInterval(getCurrentTime, 500);\nexport class TestcomponentComponent {\n  constructor(renderer, http) {\n    this.http = http;\n    this.renderer = renderer;\n  }\n  ngOnInit() {\n    var _this = this;\n    setInterval(() => {\n      this.heure = getCurrentTime();\n    }, 500);\n    setInterval( /*#__PURE__*/_asyncToGenerator(function* () {\n      try {\n        const response = yield _this.http.get(\"https://sonde.up.railway.app/recordings/last\", {\n          observe: 'response'\n        }).toPromise();\n        if (response?.status === 200) {\n          try {\n            //recuperer les data ici\n            const jsonData = response.body[0];\n            _this.degre = jsonData.temperature;\n            _this.pression = jsonData.pressure;\n            _this.humidite = jsonData.hygrometry;\n            _this.derniereActu = jsonData.timeStamp;\n            connectRasp = true;\n            _this.changeValue();\n          } catch (error) {\n            console.log(\"Impossible de récupérer les données. Error: \" + error);\n            connectRasp = false;\n            _this.changeValue();\n          }\n        } else {\n          console.log(\"Code de statut : \" + response?.status);\n          connectRasp = false;\n          _this.changeValue();\n        }\n      } catch (error) {\n        console.log(\"Impossible de se connecter au serveur. Error: \" + error);\n        connectRasp = false;\n        _this.changeValue();\n      }\n    }), 6000); //Essaye de se connecter pour récupérer les données toutes les 6s (10x par minute)\n  }\n\n  changeValue() {\n    const passageVert = document.getElementById('changeColor');\n    const changeImgRed = this.renderer.selectRootElement('#changeImgRed');\n    const changeImgGreen = this.renderer.selectRootElement('#changeImgGreen');\n    if (connectRasp) {\n      // Le code à exécuter si connectRasp est vrai\n      passageVert.style.backgroundColor = '#00ff00';\n      changeImgRed.style.display = \"none\";\n      changeImgGreen.style.display = \"block\";\n    } else {\n      // Le code à exécuter si connectRasp est faux\n      passageVert.style.backgroundColor = '#ff0000';\n      changeImgRed.style.display = \"block\";\n      changeImgGreen.style.display = \"none\";\n      this.degre = undefined;\n      this.pression = undefined;\n      this.humidite = undefined;\n      this.derniereActu = \"\";\n    }\n  }\n}\nTestcomponentComponent.ɵfac = function TestcomponentComponent_Factory(t) {\n  return new (t || TestcomponentComponent)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i1.HttpClient));\n};\nTestcomponentComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: TestcomponentComponent,\n  selectors: [[\"app-testcomponent\"]],\n  decls: 31,\n  vars: 5,\n  consts: [[1, \"connexion\"], [\"id\", \"changeImgRed\", \"src\", \"assets/img/rouge.png\"], [\"id\", \"changeImgGreen\", \"src\", \"assets/img/vert.png\", 2, \"display\", \"none\"], [1, \"ensembleElementPage\"], [1, \"block1\"], [1, \"lesAppGraphique\"], [\"id\", \"changeColor\"]],\n  template: function TestcomponentComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelement(1, \"img\", 1)(2, \"img\", 2);\n      i0.ɵɵelementStart(3, \"h1\");\n      i0.ɵɵtext(4, \"Relev\\u00E9 Raspberry\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(5, \"div\", 3);\n      i0.ɵɵtext(6);\n      i0.ɵɵelementStart(7, \"div\", 4)(8, \"label\");\n      i0.ɵɵtext(9, \"Degr\\u00E9 : \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(10);\n      i0.ɵɵelement(11, \"br\");\n      i0.ɵɵelementStart(12, \"label\");\n      i0.ɵɵtext(13, \"Pression : \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(14);\n      i0.ɵɵelement(15, \"br\");\n      i0.ɵɵelementStart(16, \"label\");\n      i0.ɵɵtext(17, \"Humidit\\u00E9 : \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(18);\n      i0.ɵɵelement(19, \"br\");\n      i0.ɵɵelementStart(20, \"label\");\n      i0.ɵɵtext(21, \"Derni\\u00E8re actualisation : \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(22);\n      i0.ɵɵelement(23, \"br\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(24, \"div\", 5);\n      i0.ɵɵelement(25, \"div\")(26, \"div\")(27, \"div\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(28, \"footer\", 6)(29, \"span\");\n      i0.ɵɵtext(30, \"Relev\\u00E9 du Raspberry Pi Pico W | Cube 2 - Groupe 2 (Nicolas, Marius et Pierre)\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(6);\n      i0.ɵɵtextInterpolate1(\" \", ctx.heure, \" \");\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate(ctx.degre ? ctx.degre + \"\\u00B0\" : \"\");\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate(ctx.pression ? ctx.pression + \"hPa\" : \"\");\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate(ctx.humidite ? ctx.humidite + \"%\" : \"\");\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate(ctx.derniereActu);\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["connectRasp","getCurrentTime","date","Date","hours","getHours","slice","minutes","getMinutes","seconds","getSeconds","setInterval","TestcomponentComponent","constructor","renderer","http","ngOnInit","heure","response","get","observe","toPromise","status","jsonData","body","degre","temperature","pression","pressure","humidite","hygrometry","derniereActu","timeStamp","changeValue","error","console","log","passageVert","document","getElementById","changeImgRed","selectRootElement","changeImgGreen","style","backgroundColor","display","undefined","selectors","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["C:\\Users\\rms2s\\Documents\\MEAN-sondes-back\\front-end\\src\\app\\testcomponent\\testcomponent.component.ts","C:\\Users\\rms2s\\Documents\\MEAN-sondes-back\\front-end\\src\\app\\testcomponent\\testcomponent.component.html"],"sourcesContent":["import { Component, OnInit, Renderer2 } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { empty } from 'rxjs';\r\n\r\n// Affectation des variables\r\nlet connectRasp = false;\r\n\r\nfunction getCurrentTime(): string {\r\n  const date: Date = new Date();\r\n  const hours: string = (\"0\" + date.getHours()).slice(-2);\r\n  const minutes: string = (\"0\" + date.getMinutes()).slice(-2);\r\n  const seconds: string = (\"0\" + date.getSeconds()).slice(-2);\r\n  return `${hours}:${minutes}:${seconds}`;\r\n}\r\nsetInterval(getCurrentTime, 500);\r\n\r\n@Component({\r\n  selector: 'app-testcomponent',\r\n  templateUrl: './testcomponent.component.html',\r\n  styleUrls: ['./testcomponent.component.scss']\r\n})\r\n\r\nexport class TestcomponentComponent implements OnInit {\r\n  heure!: string;\r\n  degre?: number;\r\n  pression?: number;\r\n  humidite?: number;\r\n  derniereActu?: string;\r\n  response?: JSON;\r\n  renderer: Renderer2;\r\n\r\n  constructor(renderer: Renderer2, private http: HttpClient) {\r\n    this.renderer = renderer;\r\n  }\r\n\r\n  ngOnInit() {\r\n    setInterval(() => { this.heure = getCurrentTime(); }, 500);\r\n\r\n    setInterval(async () => {\r\n      try {\r\n        const response = await this.http.get<any>(\"https://sonde.up.railway.app/recordings/last\", { observe: 'response' }).toPromise();\r\n        if (response?.status === 200) {\r\n          try {\r\n            //recuperer les data ici\r\n            const jsonData = response.body[0];\r\n            this.degre = jsonData.temperature;\r\n            this.pression =  jsonData.pressure;\r\n            this.humidite = jsonData.hygrometry;\r\n            this.derniereActu = jsonData.timeStamp;\r\n            connectRasp = true;\r\n            this.changeValue();\r\n          } catch (error) {\r\n            console.log(\"Impossible de récupérer les données. Error: \" + error);\r\n            connectRasp = false;\r\n            this.changeValue();\r\n          }\r\n        } else {\r\n          console.log(\"Code de statut : \" + response?.status);\r\n          connectRasp = false;\r\n          this.changeValue();\r\n        }\r\n      } catch (error) {\r\n        console.log(\"Impossible de se connecter au serveur. Error: \" + error);\r\n        connectRasp = false;\r\n        this.changeValue();\r\n      }\r\n    }, 6000); //Essaye de se connecter pour récupérer les données toutes les 6s (10x par minute)\r\n  }   \r\n\r\n  changeValue() {\r\n    const passageVert = document.getElementById('changeColor')!;\r\n    const changeImgRed = this.renderer.selectRootElement('#changeImgRed');\r\n    const changeImgGreen = this.renderer.selectRootElement('#changeImgGreen');\r\n\r\n    if (connectRasp) {\r\n        // Le code à exécuter si connectRasp est vrai\r\n        passageVert.style.backgroundColor = '#00ff00';\r\n        changeImgRed.style.display = \"none\";\r\n        changeImgGreen.style.display = \"block\";\r\n    } else {\r\n        // Le code à exécuter si connectRasp est faux\r\n        passageVert.style.backgroundColor = '#ff0000';\r\n        changeImgRed.style.display = \"block\";\r\n        changeImgGreen.style.display = \"none\";\r\n        this.degre = undefined;\r\n        this.pression = undefined;\r\n        this.humidite = undefined;\r\n        this.derniereActu = \"\";\r\n    }\r\n  }\r\n}","<!-- IMG connect with Title -->\r\n<div class=\"connexion\">\r\n    <img id=\"changeImgRed\" src=\"assets/img/rouge.png\">\r\n    <img id=\"changeImgGreen\" style=\"display: none;\" src=\"assets/img/vert.png\">\r\n    <h1>Relevé Raspberry</h1>\r\n</div>\r\n\r\n<!-- Encadrement + Data -->\r\n<div class=\"ensembleElementPage\">\r\n    {{ heure }}\r\n    <!-- DATA ENCADRER -->\r\n    <div class=\"block1\">\r\n        <label>Degré : </label>{{ degre ? degre + \"°\" : \"\" }}<br />\r\n        <label>Pression : </label>{{ pression ? pression + \"hPa\" : \"\" }}<br />\r\n        <label>Humidité : </label>{{ humidite ? humidite + \"%\" : \"\" }}<br />\r\n        <label>Dernière actualisation : </label>{{ derniereActu }}<br />\r\n    </div>\r\n\r\n    <!-- Les Apps Graphique -->\r\n    <div class=\"lesAppGraphique\">\r\n        <div> <!-- Thermomètre -->\r\n        </div>\r\n        <div> <!-- Pression -->\r\n        </div>\r\n        <div> <!-- Humidité -->\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<!-- Footer -->\r\n<footer id=\"changeColor\">\r\n    <span>Relevé du Raspberry Pi Pico W | Cube 2 - Groupe 2 (Nicolas, Marius et Pierre)</span>\r\n</footer>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}