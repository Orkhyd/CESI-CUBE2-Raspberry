{"ast":null,"code":"import * as i0 from \"@angular/core\";\n// Affectation des variables\nlet connectRasp = false;\nconst passageVert = document.getElementById('changeColor');\nconst changeImgRed = document.getElementById('changeImgRed');\nconst changeImgGreen = document.getElementById('changeImgGreen');\nfunction getCurrentTime() {\n  const date = new Date();\n  const hours = (\"0\" + date.getHours()).slice(-2);\n  const minutes = (\"0\" + date.getMinutes()).slice(-2);\n  const seconds = (\"0\" + date.getSeconds()).slice(-2);\n  return `${hours}:${minutes}:${seconds}`;\n}\nsetInterval(getCurrentTime, 500);\nexport class TestcomponentComponent {\n  ngOnInit() {\n    setInterval(() => {\n      this.heure = getCurrentTime();\n    }, 500);\n  }\n  // Dès l'appuis du BT 'Simuler une connexion':\n  simulConnect() {\n    setInterval(() => {\n      try {\n        // Connexion BDD à mettre ICI, si ça fonctionne => connectRasp true\n        connectRasp = true;\n      } catch (error) {\n        alert(error);\n        connectRasp = false;\n      }\n      this.changeValue();\n    }, 6000); //Essaye de se connecter pour recup DATA toute les 6s (10x par minute)\n  }\n\n  changeValue() {\n    if (connectRasp) {\n      // Le code à exécuter si connectRasp est vrai\n      //txtBtConnect = \"Déconnecter\";\n      this.degre = \"20°\";\n      this.pression = \"10Pa\";\n      this.humidite = \"35%\";\n      alert('test2');\n    } else {\n      // Le code à exécuter si connectRasp est faux\n      alert('test3');\n    }\n  }\n}\nTestcomponentComponent.ɵfac = function TestcomponentComponent_Factory(t) {\n  return new (t || TestcomponentComponent)();\n};\nTestcomponentComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: TestcomponentComponent,\n  selectors: [[\"app-testcomponent\"]],\n  decls: 29,\n  vars: 4,\n  consts: [[1, \"connexion\"], [\"id\", \"changeImgRed\", \"src\", \"assets/img/rouge.png\"], [\"id\", \"changeImgGreen\", \"src\", \"assets/img/vert.png\", 2, \"display\", \"none\"], [1, \"ensembleElementPage\"], [1, \"block1\"], [\"align\", \"center\"], [\"type\", \"button\", \"value\", \"Simuler une connexion\", 3, \"click\"], [1, \"lesAppGraphique\"], [\"id\", \"changeColor\"]],\n  template: function TestcomponentComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelement(1, \"img\", 1)(2, \"img\", 2);\n      i0.ɵɵelementStart(3, \"h1\");\n      i0.ɵɵtext(4, \"Relev\\u00E9 Raspberry\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(5, \"div\", 3)(6, \"div\", 4)(7, \"label\");\n      i0.ɵɵtext(8, \"Heure : \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(9);\n      i0.ɵɵelement(10, \"br\");\n      i0.ɵɵelementStart(11, \"label\");\n      i0.ɵɵtext(12, \"Degr\\u00E9 : \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(13);\n      i0.ɵɵelement(14, \"br\");\n      i0.ɵɵelementStart(15, \"label\");\n      i0.ɵɵtext(16, \"Pression : \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(17);\n      i0.ɵɵelement(18, \"br\");\n      i0.ɵɵelementStart(19, \"label\");\n      i0.ɵɵtext(20, \"Humidit\\u00E9 : \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(21);\n      i0.ɵɵelement(22, \"br\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(23, \"div\", 5)(24, \"input\", 6);\n      i0.ɵɵlistener(\"click\", function TestcomponentComponent_Template_input_click_24_listener() {\n        return ctx.simulConnect();\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(25, \"div\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(26, \"footer\", 8)(27, \"span\");\n      i0.ɵɵtext(28, \"Relev\\u00E9 du Raspberry Pi Pico W | Cube 2 - Groupe 2 (Nicolas, Marius et Pierre)\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(9);\n      i0.ɵɵtextInterpolate(ctx.heure);\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate(ctx.degre);\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate(ctx.pression);\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate(ctx.humidite);\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";AAEA;AACA,IAAIA,WAAW,GAAG,KAAK;AACvB,MAAMC,WAAW,GAAGC,QAAQ,CAACC,cAAc,CAAC,aAAa,CAAgB;AACzE,MAAMC,YAAY,GAAGF,QAAQ,CAACC,cAAc,CAAC,cAAc,CAAgB;AAC3E,MAAME,cAAc,GAAGH,QAAQ,CAACC,cAAc,CAAC,gBAAgB,CAAgB;AAE/E,SAASG,cAAc;EACrB,MAAMC,IAAI,GAAS,IAAIC,IAAI,EAAE;EAC7B,MAAMC,KAAK,GAAW,CAAC,GAAG,GAAGF,IAAI,CAACG,QAAQ,EAAE,EAAEC,KAAK,CAAC,CAAC,CAAC,CAAC;EACvD,MAAMC,OAAO,GAAW,CAAC,GAAG,GAAGL,IAAI,CAACM,UAAU,EAAE,EAAEF,KAAK,CAAC,CAAC,CAAC,CAAC;EAC3D,MAAMG,OAAO,GAAW,CAAC,GAAG,GAAGP,IAAI,CAACQ,UAAU,EAAE,EAAEJ,KAAK,CAAC,CAAC,CAAC,CAAC;EAC3D,OAAO,GAAGF,KAAK,IAAIG,OAAO,IAAIE,OAAO,EAAE;AACzC;AACAE,WAAW,CAACV,cAAc,EAAE,GAAG,CAAC;AAQhC,OAAM,MAAOW,sBAAsB;EAMjCC,QAAQ;IACNF,WAAW,CAAC,MAAK;MAAG,IAAI,CAACG,KAAK,GAAGb,cAAc,EAAE;IAAE,CAAC,EAAE,GAAG,CAAC;EAC5D;EAEA;EACAc,YAAY;IACVJ,WAAW,CAAC,MAAK;MACf,IAAI;QACF;QACAhB,WAAW,GAAG,IAAI;OACnB,CAAC,OAAOqB,KAAK,EAAE;QACdC,KAAK,CAACD,KAAK,CAAC;QACZrB,WAAW,GAAG,KAAK;;MAErB,IAAI,CAACuB,WAAW,EAAE;IACpB,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;EACZ;;EAEAA,WAAW;IACT,IAAIvB,WAAW,EAAE;MACf;MACA;MACF,IAAI,CAACwB,KAAK,GAAG,KAAK;MAClB,IAAI,CAACC,QAAQ,GAAG,MAAM;MACtB,IAAI,CAACC,QAAQ,GAAG,KAAK;MACnBJ,KAAK,CAAC,OAAO,CAAC;KACf,MAAM;MACL;MACAA,KAAK,CAAC,OAAO,CAAC;;EAElB;;AApCWL,sBAAsB;mBAAtBA,sBAAsB;AAAA;AAAtBA,sBAAsB;QAAtBA,sBAAsB;EAAAU;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCtBnCC,8BAAuB;MACnBA,yBAAkD;MAElDA,0BAAI;MAAAA,qCAAgB;MAAAA,iBAAK;MAI7BA,8BAAiC;MAGlBA,wBAAQ;MAAAA,iBAAQ;MAAAA,YAAW;MAAAA,sBAAM;MACxCA,8BAAO;MAAAA,8BAAQ;MAAAA,iBAAQ;MAAAA,aAAW;MAAAA,sBAAM;MACxCA,8BAAO;MAAAA,4BAAW;MAAAA,iBAAQ;MAAAA,aAAc;MAAAA,sBAAM;MAC9CA,8BAAO;MAAAA,iCAAW;MAAAA,iBAAQ;MAAAA,aAAc;MAAAA,sBAAM;MAClDA,iBAAM;MAGNA,+BAAoB;MACmCA;QAAA,OAASC,kBAAc;MAAA,EAAE;MAA5ED,iBAA+E;MAInFA,0BAAmC;MACvCA,iBAAM;MAGNA,kCAAyB;MACfA,mGAA6E;MAAAA,iBAAO;;;MAjB/DA,eAAW;MAAXA,+BAAW;MACXA,eAAW;MAAXA,+BAAW;MACRA,eAAc;MAAdA,kCAAc;MACdA,eAAc;MAAdA,kCAAc","names":["connectRasp","passageVert","document","getElementById","changeImgRed","changeImgGreen","getCurrentTime","date","Date","hours","getHours","slice","minutes","getMinutes","seconds","getSeconds","setInterval","TestcomponentComponent","ngOnInit","heure","simulConnect","error","alert","changeValue","degre","pression","humidite","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["C:\\Users\\spred\\testfile\\src\\app\\testcomponent\\testcomponent.component.ts","C:\\Users\\spred\\testfile\\src\\app\\testcomponent\\testcomponent.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n// Affectation des variables\nlet connectRasp = false;\nconst passageVert = document.getElementById('changeColor') as HTMLElement;\nconst changeImgRed = document.getElementById('changeImgRed') as HTMLElement;\nconst changeImgGreen = document.getElementById('changeImgGreen') as HTMLElement;\n\nfunction getCurrentTime(): string {\n  const date: Date = new Date();\n  const hours: string = (\"0\" + date.getHours()).slice(-2);\n  const minutes: string = (\"0\" + date.getMinutes()).slice(-2);\n  const seconds: string = (\"0\" + date.getSeconds()).slice(-2);\n  return `${hours}:${minutes}:${seconds}`;\n}\nsetInterval(getCurrentTime, 500);\n\n@Component({\n  selector: 'app-testcomponent',\n  templateUrl: './testcomponent.component.html',\n  styleUrls: ['./testcomponent.component.scss']\n})\n\nexport class TestcomponentComponent implements OnInit {\n  heure!: string;\n  degre!: string;\n  pression!: string;\n  humidite!: string;\n\n  ngOnInit() {\n    setInterval(() => { this.heure = getCurrentTime(); }, 500);\n  }\n\n  // Dès l'appuis du BT 'Simuler une connexion':\n  simulConnect(): void {\n    setInterval(() => {\n      try {\n        // Connexion BDD à mettre ICI, si ça fonctionne => connectRasp true\n        connectRasp = true;\n      } catch (error) {\n        alert(error);\n        connectRasp = false;\n      }\n      this.changeValue();\n    }, 6000); //Essaye de se connecter pour recup DATA toute les 6s (10x par minute)\n  }\n\n  changeValue() {\n    if (connectRasp) {\n      // Le code à exécuter si connectRasp est vrai\n      //txtBtConnect = \"Déconnecter\";\n\t\t  this.degre = \"20°\";\n\t\t  this.pression = \"10Pa\";\n\t\t  this.humidite = \"35%\";\n      alert('test2');\n    } else {\n      // Le code à exécuter si connectRasp est faux\n      alert('test3');\n    }\n  }\n}","<!-- IMG connect with Title -->\n<div class=\"connexion\">\n    <img id=\"changeImgRed\" src=\"assets/img/rouge.png\">\n    <img id=\"changeImgGreen\" style=\"display: none;\" src=\"assets/img/vert.png\">\n    <h1>Relevé Raspberry</h1>\n</div>\n\n<!-- Encadrement + Data -->\n<div class=\"ensembleElementPage\">\n    <!-- DATA ENCADRER -->\n    <div class=\"block1\">\n        <label>Heure : </label>{{ heure }}<br />\n        <label>Degré : </label>{{ degre }}<br />\n        <label>Pression : </label>{{ pression }}<br />\n        <label>Humidité : </label>{{ humidite }}<br />\n    </div>\n\n    <!-- Form Avec BT simulation connexion -->\n    <div align=\"center\">\n        <input type=\"button\" value=\"Simuler une connexion\" (click)=\"simulConnect();\" />\n    </div>\n\n    <!-- Les Apps Graphique -->\n    <div class=\"lesAppGraphique\"></div>\n</div>\n\n<!-- Footer -->\n<footer id=\"changeColor\">\n    <span>Relevé du Raspberry Pi Pico W | Cube 2 - Groupe 2 (Nicolas, Marius et Pierre)</span>\n</footer>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}