{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/rms2s/Documents/MEAN-sondes-back/front-end/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n// Affectation des variables\nlet connectRasp = false;\nfunction getCurrentTime() {\n  const date = new Date();\n  const hours = (\"0\" + date.getHours()).slice(-2);\n  const minutes = (\"0\" + date.getMinutes()).slice(-2);\n  const seconds = (\"0\" + date.getSeconds()).slice(-2);\n  return `${hours}:${minutes}:${seconds}`;\n}\nsetInterval(getCurrentTime, 500);\nexport class TestcomponentComponent {\n  constructor(renderer, http) {\n    this.http = http;\n    this.renderer = renderer;\n  }\n  ngOnInit() {\n    var _this = this;\n    setInterval(() => {\n      this.heure = getCurrentTime();\n    }, 500);\n    setInterval( /*#__PURE__*/_asyncToGenerator(function* () {\n      try {\n        const response = yield _this.http.get(\"https://sonde.up.railway.app/recordings/last\", {\n          observe: 'response'\n        }).toPromise();\n        if (response?.status === 200) {\n          try {\n            //recuperer les data ici\n            const jsonData = response.body[0];\n            _this.degre = jsonData.temperature;\n            _this.pression = jsonData.pressure;\n            _this.humidite = jsonData.hygrometry;\n            _this.derniereActu = jsonData.timeStamp;\n            connectRasp = true;\n            _this.changeValue();\n          } catch (error) {\n            console.log(\"Impossible de récupérer les données. Error: \" + error);\n            connectRasp = false;\n            _this.changeValue();\n          }\n        } else {\n          console.log(\"Code de statut : \" + response?.status);\n          connectRasp = false;\n          _this.changeValue();\n        }\n      } catch (error) {\n        console.log(\"Impossible de se connecter au serveur. Error: \" + error);\n        connectRasp = false;\n        _this.changeValue();\n      }\n    }), 6000); //Essaye de se connecter pour récupérer les données toutes les 6s (10x par minute)\n  }\n\n  changeValue() {\n    const passageVert = document.getElementById('changeColor');\n    const changeImgRed = this.renderer.selectRootElement('#changeImgRed');\n    const changeImgGreen = this.renderer.selectRootElement('#changeImgGreen');\n    if (connectRasp) {\n      // Le code à exécuter si connectRasp est vrai\n      passageVert.style.backgroundColor = '#00ff00';\n      changeImgRed.style.display = \"none\";\n      changeImgGreen.style.display = \"block\";\n    } else {\n      // Le code à exécuter si connectRasp est faux\n      passageVert.style.backgroundColor = '#ff0000';\n      changeImgRed.style.display = \"block\";\n      changeImgGreen.style.display = \"none\";\n      this.degre = undefined;\n      this.pression = undefined;\n      this.humidite = undefined;\n      this.derniereActu = \"\";\n    }\n  }\n}\nTestcomponentComponent.ɵfac = function TestcomponentComponent_Factory(t) {\n  return new (t || TestcomponentComponent)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i1.HttpClient));\n};\nTestcomponentComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: TestcomponentComponent,\n  selectors: [[\"app-testcomponent\"]],\n  decls: 31,\n  vars: 5,\n  consts: [[1, \"connexion\"], [\"id\", \"changeImgRed\", \"src\", \"assets/img/rouge.png\"], [\"id\", \"changeImgGreen\", \"src\", \"assets/img/vert.png\", 2, \"display\", \"none\"], [1, \"ensembleElementPage\"], [1, \"block1\"], [1, \"lesAppGraphique\"], [\"id\", \"changeColor\"]],\n  template: function TestcomponentComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelement(1, \"img\", 1)(2, \"img\", 2);\n      i0.ɵɵelementStart(3, \"h1\");\n      i0.ɵɵtext(4, \"Relev\\u00E9 Raspberry\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(5, \"div\", 3);\n      i0.ɵɵtext(6);\n      i0.ɵɵelementStart(7, \"div\", 4)(8, \"label\");\n      i0.ɵɵtext(9, \"Degr\\u00E9 : \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(10);\n      i0.ɵɵelement(11, \"br\");\n      i0.ɵɵelementStart(12, \"label\");\n      i0.ɵɵtext(13, \"Pression : \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(14);\n      i0.ɵɵelement(15, \"br\");\n      i0.ɵɵelementStart(16, \"label\");\n      i0.ɵɵtext(17, \"Humidit\\u00E9 : \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(18);\n      i0.ɵɵelement(19, \"br\");\n      i0.ɵɵelementStart(20, \"label\");\n      i0.ɵɵtext(21, \"Derni\\u00E8re actualisation : \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(22);\n      i0.ɵɵelement(23, \"br\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(24, \"div\", 5);\n      i0.ɵɵelement(25, \"div\")(26, \"div\")(27, \"div\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(28, \"footer\", 6)(29, \"span\");\n      i0.ɵɵtext(30, \"Relev\\u00E9 du Raspberry Pi Pico W | Cube 2 - Groupe 2 (Nicolas, Marius et Pierre)\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(6);\n      i0.ɵɵtextInterpolate1(\" \", ctx.heure, \" \");\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate(ctx.degre ? ctx.degre + \"\\u00B0\" : \"\");\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate(ctx.pression ? ctx.pression + \"hPa\" : \"\");\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate(ctx.humidite ? ctx.humidite + \"%\" : \"\");\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate(ctx.derniereActu);\n    }\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}